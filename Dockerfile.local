# syntax=docker/dockerfile:1
# Initialize device type args
ARG USE_CUDA=true
ARG USE_OLLAMA=false
ARG USE_CUDA_VER=cu121
ARG CACHEBUST

ARG USE_EMBEDDING_MODEL=intfloat/multilingual-e5-large 
ARG USE_RERANKING_MODEL=""
ARG BUILD_HASH=dev-build
ARG UID=0
ARG GID=0

# Add tiktoken encoding name
ARG USE_TIKTOKEN_ENCODING_NAME="cl100k_base"

######## WebUI frontend ########
FROM --platform=$BUILDPLATFORM node:22-alpine3.20 AS build
ARG BUILD_HASH

WORKDIR /app
RUN echo "$CACHEBUST"

COPY package.json package-lock.json ./
# Increase npm timeout and add retries
RUN npm config set fetch-retry-maxtimeout 1000000
RUN npm config set fetch-timeout 1000000
RUN npm ci

COPY . .
ENV APP_BUILD_HASH=${BUILD_HASH}
RUN npm run build

######## WebUI backend ########
FROM python:3.11-slim-bookworm as base

# Use args
ARG USE_CUDA
ARG USE_OLLAMA
ARG USE_CUDA_VER
ARG USE_EMBEDDING_MODEL
ARG USE_RERANKING_MODEL
ARG UID
ARG GID
ARG USE_TIKTOKEN_ENCODING_NAME


# Set environment variables
ENV ENV=prod \
    PORT=8080 \
    USE_OLLAMA_DOCKER=${USE_OLLAMA} \
    USE_CUDA_DOCKER=${USE_CUDA} \
    USE_CUDA_DOCKER_VER=${USE_CUDA_VER} \
    USE_EMBEDDING_MODEL_DOCKER=${USE_EMBEDDING_MODEL} \
    USE_RERANKING_MODEL_DOCKER=${USE_RERANKING_MODEL} \
    OLLAMA_BASE_URL="/ollama" \
    OPENAI_API_BASE_URL="https://api.openai.com/v1" \
    OPENAI_API_KEY="" \
    WEBUI_SECRET_KEY="" \
    SCARF_NO_ANALYTICS=true \
    DO_NOT_TRACK=true \
    ANONYMIZED_TELEMETRY=false \
    WHISPER_MODEL="ivrit-ai/faster-whisper-v2-d3-e3" \
    KMP_DUPLICATE_LIB_OK=true \
    PYTORCH_CUDA_ALLOC_CONF="max_split_size_mb:32,garbage_collection_threshold:0.8" \
    WHISPER_MODEL_DIR="/app/backend/data/cache/whisper/models" \
    RAG_EMBEDDING_MODEL="$USE_EMBEDDING_MODEL_DOCKER" \
    RAG_RERANKING_MODEL="$USE_RERANKING_MODEL_DOCKER" \
    SENTENCE_TRANSFORMERS_HOME="/app/backend/data/cache/embedding/models" \
    HF_HOME="/app/backend/data/cache/embedding/models" \
    HOME=/root \
    GIT_PYTHON_REFRESH=quiet \
    PATH="/usr/bin:${PATH}" \
    TIKTOKEN_ENCODING_NAME=${USE_TIKTOKEN_ENCODING_NAME}
    
    
## Tiktoken cache dir  ##
ENV TIKTOKEN_CACHE_DIR="/app/backend/data/cache/tiktoken"

# Add your custom environment variables here
ENV GROQ_API_BASE_URL="https://api.groq.com/openai/v1" \
    GROQ_API_KEY="" \
    ANTHROPIC_API_KEY="" \
    ANTROPHIC_BASE_URL="https://api.anthropic.com/v1/messages" \
    OPENWEATHERMAP_API_KEY="" \
    GOOGLE_API_KEY="" \
    GOOGLE_SEARCH_ID="" \
    WOLFRAM_APP_ID="" \
    WOLFARM_BASE_URL="https://www.wolframalpha.com/api/v1/llm-api" \
    TAVILIY_BASE_URL="https://api.tavily.com/" \
    TAVILIY_SEARCH_API_KEY="" \
    SERPLY_BASE_URL="api.serply.io/v1/search/q=search+api" \
    SERPLY_SEARCH_APY_KEY="" \
    BRAVE_SEARCH_API_KEYBASE_URL="https://api.search.brave.com/res/v1/web/search" \
    BRAVE_SEARCH_VIDEO_URL="https://api.search.brave.com/res/v1/videos/search" \
    BRAVE_SEARCH_IMAGE_URL="https://api.search.brave.com/res/v1/images/search" \
    BRAVE_SEARCH_API_KEY="" \
    SERPER_BASE_URL="https://google.serper.dev/search" \
    SERPER_SEARCH_API_KEY="" \
    JINA_BASE_URL="https://r.jina.ai/" \
    JINA_SEARCH_URL="https://s.jina.ai" \
    JINA_SEARCH_API_KEY="" \
    BING_BASE_URL="https://api.bing.microsoft.com/v7.0/search" \
    BING_SEARCH_API_KEY="" \
    MISTRAL_BASE_URL="https://api.mistral.ai/v1/chat/completions" \
    MISTRAL_API_KEY="" \
    FINNHUB_API_KEY="" \
    OLLAMA_API_BASE_URL="http://localhost:11434/api" \
    OLLAMA_API_EMBEDDINGS_URL="http://localhost:11434/api/embeddings" \
    OLLAMA_API_ENDPOINT_URL="http://localhost:11434/api/generate" \
    OLLAMA_API_CHAT_ENDPOINT_URL="http://localhost:11434/api/chat" \
    OLLAMA_API_ENDPOINT_URLS="http://localhost:11434/api/urls" \
    OLLAMA_API_ENDPOINT_UPDATE_URLS="http://localhost:11434/api/urls/update" \
    OLLAMA_API_ENDPOINT_CONFIG_URL="http://localhost:11434/api/config" \
    OLLAMA_API_ENDPOINT_CONFIG_UPDATE_URL="http://localhost:11434/api/config/update" \
    OLLAMA_API_VERSION_URL="http://localhost:11434/api/version" \
    OLLAMA_API_TAGS_URL="http://localhost:11434/api/tags" \
    OLLAMA_API_CREATE_URL="http://localhost:11434/api/create" \
    OLLAMA_API_DELETE_URL="http://localhost:11434/api/delete" \
    OLLAMA_API_PULL_URL="http://localhost:11434/api/pull" \
    OLLAMA_API_MODELS_DOWNLOAD_URL="http://localhost:11434/api/models/download" \
    OLLAMA_API_MODELS_UPLOAD_URL="http://localhost:11434/api/models/upload" \
    USE_OLLAMA_DOCKER="false" \
    CORS_ALLOW_ORIGIN="*"

WORKDIR /app/backend

# Create user and group if not root
RUN if [ $UID -ne 0 ]; then \
    if [ $GID -ne 0 ]; then \
    addgroup --gid $GID app; \
    fi; \
    adduser --uid $UID --gid $GID --home $HOME --disabled-password --no-create-home app; \
    fi

RUN mkdir -p $HOME/.cache/chroma
RUN echo -n 00000000-0000-0000-0000-000000000000 > $HOME/.cache/chroma/telemetry_user_id

# Make sure the user has access to the app and root directory
RUN chown -R $UID:$GID /app $HOME

# Install system dependencies including git
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    g++ \
    pandoc \
    netcat-openbsd \
    curl \
    jq \
    gcc \
    python3-dev \
    ffmpeg \
    libsm6 \
    libxext6 \
    git && \
    if [ "$USE_OLLAMA" = "true" ]; then \
    curl -fsSL https://ollama.com/install.sh | sh; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Ensure git is in the PATH and set GIT_PYTHON_GIT_EXECUTABLE
ENV PATH="/usr/bin:${PATH}" \
    GIT_PYTHON_GIT_EXECUTABLE=/usr/bin/git

# Verify git installation
RUN git --version
# Install Python dependencies
COPY --chown=$UID:$GID ./backend/requirements.txt ./requirements.txt

RUN echo "Contents of requirements.txt:" && \
    cat requirements.txt && \
    pip3 install --upgrade pip && \
    pip3 --version && \
    # Install essential build dependencies
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3-dev \
        build-essential \
        gcc \
        libc6-dev && \
    # Install pip packages with explicit commands to ensure proper installation
    pip3 install --no-cache-dir \
        setuptools \
        wheel \
        uv && \
    if [ "$USE_CUDA" = "true" ]; then \
        echo "Installing CUDA version" && \
        pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/$USE_CUDA_DOCKER_VER && \
        # Install sentence-transformers and its dependencies explicitly
        pip3 install --no-cache-dir \
            numpy \
            scipy \
            scikit-learn \
            nltk \
            transformers \
            sentencepiece \
            tiktoken \
            sentence-transformers==3.2.0 && \
        # Install other requirements
        uv pip install --system -r requirements.txt --no-cache-dir && \
        # Load and verify models
        python -c "import os; from sentence_transformers import SentenceTransformer; SentenceTransformer(os.environ['RAG_EMBEDDING_MODEL'], device='cpu')" && \
        python -c "import os; from faster_whisper import WhisperModel; WhisperModel(os.environ['WHISPER_MODEL'], device='cpu', compute_type='int8', download_root=os.environ['WHISPER_MODEL_DIR'])"; \
        python -c "import os; import tiktoken; tiktoken.get_encoding(os.environ['TIKTOKEN_ENCODING_NAME'])"; \
    else \
        echo "Installing CPU version" && \
        pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu && \
        # Install sentence-transformers and its dependencies explicitly
        pip3 install --no-cache-dir \
            numpy \
            scipy \
            scikit-learn \
            nltk \
            transformers \
            sentencepiece \
            tiktoken \
            sentence-transformers==3.2.0 && \
        # Install other requirements
        uv pip install --system -r requirements.txt --no-cache-dir && \
        python -c "import os; from sentence_transformers import SentenceTransformer; SentenceTransformer(os.environ['RAG_EMBEDDING_MODEL'], device='cpu')" && \
        python -c "import os; from faster_whisper import WhisperModel; WhisperModel(os.environ['WHISPER_MODEL'], device='cpu', compute_type='int8', download_root=os.environ['WHISPER_MODEL_DIR'])"; \
        python -c "import os; import tiktoken; tiktoken.get_encoding(os.environ['TIKTOKEN_ENCODING_NAME'])"; \
    fi && \
    # Clean up
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    # Set permissions
    chown -R $UID:$GID /app/backend/data/

# Ensure the data directory exists and has correct permissions
RUN mkdir -p /app/backend/data && chown -R $UID:$GID /app/backend/data

# Create cache directories with proper permissions
RUN mkdir -p /app/backend/data/cache/embedding/models && \
    mkdir -p /app/backend/data/cache/whisper/models && \
    mkdir -p /app/backend/data/cache/tiktoken && \
    chown -R $UID:$GID /app/backend/data/cache

# Copy built frontend files
COPY --chown=$UID:$GID --from=build /app/build /app/build
COPY --chown=$UID:$GID --from=build /app/CHANGELOG.md /app/CHANGELOG.md
COPY --chown=$UID:$GID --from=build /app/package.json /app/package.json

# Copy backend files
COPY --chown=$UID:$GID ./backend .

EXPOSE 8080

HEALTHCHECK CMD curl --silent --fail http://localhost:${PORT:-8080}/health | jq -ne 'input.status == true' || exit 1

USER $UID:$GID

ARG BUILD_HASH
ENV WEBUI_BUILD_VERSION=${BUILD_HASH}

RUN echo "export GIT_PYTHON_REFRESH=quiet" >> /etc/profile.d/git_python.sh
CMD [ "bash", "start.sh"]